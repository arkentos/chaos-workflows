import java.text.SimpleDateFormat

def l1 = 'dev'
def l2 = 'tools'
def serviceName = 'fmea-test-4'
def serviceRepoName = 'fmea-test-4'
def region = 'usw2'
def iksType = 'ppd'
def appName = "${l1}-${l2}-${serviceName}-${region}-${iksType}"
//def appName = 'fmea-test-4'
def deployable_branches = ["fmea1"]
def ptNameVersion = "${serviceName}-${UUID.randomUUID().toString().toLowerCase()}"
def repo = "dev/tools/fmea-test-4/service"
def tag = ""
def registry = "docker.com"
def image = "${repo}/${serviceName}"
def preprodOnly = true
def git_repo = ""
def buildURL =""
// ****** Load Test default values *******
def noOfPods = "2"
def noOfUsers = "20"
def durationInMin = "2"
def healthUrlDefault = "https://test.com/health/full"
def pfi_namespace = "test-namespace"
def waitForUserInputMins = 2
def perfJsonDefault = "defaultParams.json"
def karateEnvDefault = "prf"
def peakTPSDefault = "1"
def rampupTimeDefault = "2"
def steadyStateTimeDefault = "7"
def baseurl = "https://test.com"
def Custom = "FMEA1"
// **********************************************

def clusterMap = [:]
clusterMap["pfi"] = "https://api.us-west-2.elb.amazonaws.com"

properties([
  /*
  daysToKeepStr: history is only kept up to this days.
  numToKeepStr: only this number of build logs are kept.
  artifactDaysToKeepStr: artifacts are only kept up to this days.
  artifactNumToKeepStr: only this number of builds have their artifacts kept.
  */
  buildDiscarder(logRotator(daysToKeepStr:'', numToKeepStr: '10', artifactDaysToKeepStr: '', artifactNumToKeepStr: ''))
])

podTemplate(name: ptNameVersion, label: ptNameVersion, containers: [
    //containerTemplate(name: 'docker', image: 'docker.com/dev/build/ibp/jnlp-slave-with-docker:18.03.0', ttyEnabled: true, command: 'cat', args: ''),
    containerTemplate(name: 'cdtools', image: 'docker.com/dev/deploy/cd/argocd-utils:stable', alwaysPullImage: true, ttyEnabled: true, command: 'cat', args: ''),
    containerTemplate(name: 'argo', image: 'docker.com/argoproj/argocli:v2.2.1', alwaysPullImage: true, ttyEnabled: true, command: 'cat', args: ''),
    containerTemplate(name: 'aws-s3', image: 'docker.com/dev/build/ibp/jnlp-slave-with-docker:3.26-1_jenkins-2-138-update_3', alwaysPullImage: true, ttyEnabled: true, command: 'cat', args: '')
    ],
    volumes: [hostPathVolume(hostPath: '/var/run/dind/docker.sock', mountPath: '/var/run/docker.sock')],
    
)

{
    try {
        // DO NOT CHANGE
        def isPR = env.CHANGE_ID != null
        def branch = env.CHANGE_ID != null ? env.CHANGE_TARGET : env.BRANCH_NAME
        def dateFormat = new SimpleDateFormat("yyyyMMddHHmm")
        def date = new Date()
        def date_tag = dateFormat.format(date)

        node(ptNameVersion) {
            // DO NOT CHANGE
            def scmInfo = checkout scm
            println("printing scmInfo:")
            println("********URL***********")
            println(scmInfo.GIT_URL)
            buildURL = env.BUILD_URL
            git_repo = scmInfo.GIT_URL
            println("********URL***********")
            def shortCommit = "${scmInfo.GIT_COMMIT}"[0..6]
            tag = "${env.BUILD_TAG}-${shortCommit}"
            def hasReleaseTag = sh(returnStdout: true, script: 'git tag --points-at HEAD').trim().startsWith('release-')

            stage("Chaos Testing ") {
                boolean failed = false;
                try {
                    withCredentials([file(credentialsId: 'ARGO_CHAOS', variable: 'ARGO_CHAOS')]) {
                        container('argo') {
                            println("invoking argo ${appName}")
                            sh """#!/bin/sh -xe
                            ls -al
                            mkdir \${HOME}/.kube
                            cp \${ARGO_CHAOS} \${HOME}/.kube/config
                            """
                            sh("argo list --kubeconfig \${HOME}/.kube/config")
                            sh("argo submit litmus/load-tests/argowf-chaos.yaml -pappNamespace=dev-tools-fmea-test-4-usw2-ppd-prf -pappLabel=fmea-test-4  --watch")
                            sh("argo list")
                        }
                    }
                } catch (err) {
                    failed = true;
                } finally {
                    processStatus(failed, "Test_${envName}", envName)
                }
            }
            
        } // node
        if (preprodOnly || isPR) {
            echo "Preprod or PR build, not going to try Stage or Prod"
            currentBuild.result = 'SUCCESS'
            return
        }
    } catch (e) {
        echo "Caught error during pipeline: ${e}"
        throw e
    } finally {
        echo "Current build result = ${currentBuild.result}"
        
    }

}
